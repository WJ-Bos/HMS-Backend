###Hotel Management.

## Creating the Entities ->
    new Annotations ->
        @Future used to ensure that a date isd a future date
        @Min Used to define minimum values
        @ManyToOne define one-to-many relationship
        @JoinColumn in this case used to define a FK Column in the Booking table that references the id column in the Users table

        -> When Creating an Entity and Adding a Collection inside , @ManyToOne or @OneToMany need to be used to define the relationship

## Creating the DTO ->
    new Annotations ->
        @NotBlank ensures that a Value is not empty

        --> Created a LoginRequest and Response class to handle the Login request and the Respected responses.

## Creating the Repository ->
    new Annotations ->
        @Query used to define a Query on a Method

## JWT Utils
     -> The JWTUtils class is responsible for generating JSON Web Tokens (JWT) in a Spring application.
        JWT is a compact, URL-safe means of representing
        claims to be transferred between two parties. In this context, JWTs are used for authentication purposes,
        allowing secure communication between clients and servers.

        # Key Components
        # Expiration Time

        private static final long EXPIRATION_TIME = 604_800_000;
        This constant defines the token's validity period, which is 7 days (604,800,000 milliseconds).
        Tokens generated by this utility will expire 7 days after issuance.

        # Secret Key

        private final SecretKey Key;
        The Key field is an instance of SecretKey, which is used to sign the JWT.
        This key is derived from a base64-encoded string, decoded into bytes, and then converted into an HMAC-SHA256 key using SecretKeySpec.

        # Constructor

        public JWTUtils() { ... }
        The constructor initializes the Key field. It decodes a hardcoded base64 secret key string into bytes and uses the SecretKeySpec class to create an HMAC-SHA256 key.

        # Generating a JWT

        public String generateToken(UserDetails userDetails) { ... }
        This method creates a JWT using the io.jsonwebtoken library (Jwts).
        The token is built with the following claims:
        Subject: The username of the user, obtained from UserDetails.
        Issued At: The current timestamp.
        Expiration: The current timestamp plus the defined expiration time (7 days).
        The token is then signed using the HMAC-SHA256 algorithm and the secret key.
        Finally, the token is returned as a compact, serialized string.
        Security Considerations

        Hashing Algorithm Used -> HmacSha256 ->
                    HMAC-SHA256 (Hash-based Message Authentication Code with SHA-256) is a cryptographic algorithm
                    that combines a secret key with a hash function (SHA-256) to produce a fixed-size message digest.
                    It ensures data integrity and authenticity by allowing the verification that the data hasn't been
                    altered and was created by someone who possesses the secret key. Commonly used in token generation,
                    such as JWTs, it's secure and widely adopted for signing and verifying messages.

        JWT Claims ->
            In JWT (JSON Web Tokens), claims are key-value pairs that convey information about an entity (typically the user)
            and additional metadata. Claims are stored in the payload section of the JWT and can be broadly categorized into three types:

            # Registered Claims:
            sub (Subject): Identifies the principal (user).
            iat (Issued At): Timestamp of token issuance.
            exp (Expiration): Token expiration time.

            # Public Claims:
            Custom claims shared across systems, e.g., user_role, permissions.

            # Private Claims:
            Application-specific custom claims, e.g., department_id, user_preferences.



